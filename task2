import tkinter as tk
from tkinter import messagebox
from datetime import datetime
import sqlite3

# Main window setup
root = tk.Tk()
root.title("Library Management System")
root.geometry("800x600")

# Connect to the database
def connect_db():
    return sqlite3.connect('library.db')

# Function to add items to the library
def add_item():
    def save_item():
        conn = connect_db()
        cursor = conn.cursor()
        title = entry_title.get()
        author = entry_author.get()
        category = entry_category.get()
        cursor.execute('INSERT INTO items (title, author, category, status) VALUES (?, ?, ?, ?)',
                       (title, author, category, 'Available'))
        conn.commit()
        conn.close()
        messagebox.showinfo("Success", "Item added successfully.")
        add_window.destroy()

    add_window = tk.Toplevel(root)
    add_window.title("Add Item")
    
    tk.Label(add_window, text="Title:").grid(row=0, column=0)
    tk.Label(add_window, text="Author:").grid(row=1, column=0)
    tk.Label(add_window, text="Category:").grid(row=2, column=0)
    
    entry_title = tk.Entry(add_window)
    entry_author = tk.Entry(add_window)
    entry_category = tk.Entry(add_window)
    
    entry_title.grid(row=0, column=1)
    entry_author.grid(row=1, column=1)
    entry_category.grid(row=2, column=1)
    
    tk.Button(add_window, text="Save", command=save_item).grid(row=3, column=0, columnspan=2)

# Function to check out items
def checkout_item():
    def save_checkout():
        conn = connect_db()
        cursor = conn.cursor()
        item_id = entry_item_id.get()
        user = entry_user.get()
        cursor.execute('SELECT status FROM items WHERE id = ?', (item_id,))
        item = cursor.fetchone()
        if item and item[0] == 'Available':
            checkout_date = datetime.now().strftime("%Y-%m-%d")
            cursor.execute('INSERT INTO transactions (item_id, user, checkout_date, status) VALUES (?, ?, ?, ?)',
                           (item_id, user, checkout_date, 'Checked Out'))
            cursor.execute('UPDATE items SET status = ? WHERE id = ?', ('Checked Out', item_id))
            conn.commit()
            messagebox.showinfo("Success", "Item checked out successfully.")
        else:
            messagebox.showerror("Error", "Item not available.")
        conn.close()
        checkout_window.destroy()

    checkout_window = tk.Toplevel(root)
    checkout_window.title("Checkout Item")

    tk.Label(checkout_window, text="Item ID:").grid(row=0, column=0)
    tk.Label(checkout_window, text="User:").grid(row=1, column=0)
    
    entry_item_id = tk.Entry(checkout_window)
    entry_user = tk.Entry(checkout_window)
    
    entry_item_id.grid(row=0, column=1)
    entry_user.grid(row=1, column=1)
    
    tk.Button(checkout_window, text="Checkout", command=save_checkout).grid(row=2, column=0, columnspan=2)

# Function to return items
def return_item():
    def save_return():
        conn = connect_db()
        cursor = conn.cursor()
        transaction_id = entry_transaction_id.get()
        cursor.execute('SELECT checkout_date FROM transactions WHERE transaction_id = ?', (transaction_id,))
        transaction = cursor.fetchone()
        if transaction:
            return_date = datetime.now()
            overdue_days = (return_date - datetime.strptime(transaction[0], "%Y-%m-%d")).days - 14
            fine_amount = max(0, overdue_days * 2)  # Assuming a fine of $2 per overdue day
            
            cursor.execute('UPDATE transactions SET return_date = ?, status = ? WHERE transaction_id = ?',
                           (return_date.strftime("%Y-%m-%d"), 'Returned', transaction_id))
            cursor.execute('INSERT INTO fines (transaction_id, fine_amount, paid) VALUES (?, ?, ?)',
                           (transaction_id, fine_amount, 0))
            cursor.execute('UPDATE items SET status = ? WHERE id = (SELECT item_id FROM transactions WHERE transaction_id = ?)', 
                           ('Available', transaction_id))
            conn.commit()
            if fine_amount > 0:
                messagebox.showinfo("Fine", f"Return successful. Overdue fine: ${fine_amount:.2f}")
            else:
                messagebox.showinfo("Success", "Return successful. No overdue fine.")
        else:
            messagebox.showerror("Error", "Invalid transaction ID.")
        conn.close()
        return_window.destroy()

    return_window = tk.Toplevel(root)
    return_window.title("Return Item")

    tk.Label(return_window, text="Transaction ID:").grid(row=0, column=0)
    entry_transaction_id = tk.Entry(return_window)
    entry_transaction_id.grid(row=0, column=1)
    
    tk.Button(return_window, text="Return", command=save_return).grid(row=1, column=0, columnspan=2)

# Function to search items
def search_items():
    def perform_search():
        conn = connect_db()
        cursor = conn.cursor()
        search_term = entry_search.get()
        cursor.execute('SELECT * FROM items WHERE title LIKE ? OR author LIKE ? OR category LIKE ?', 
                       ('%' + search_term + '%', '%' + search_term + '%', '%' + search_term + '%'))
        results = cursor.fetchall()
        listbox_results.delete(0, tk.END)
        for item in results:
            listbox_results.insert(tk.END, f"ID: {item[0]}, Title: {item[1]}, Author: {item[2]}, Category: {item[3]}, Status: {item[4]}")
        conn.close()

    search_window = tk.Toplevel(root)
    search_window.title("Search Items")

    tk.Label(search_window, text="Search:").grid(row=0, column=0)
    entry_search = tk.Entry(search_window)
    entry_search.grid(row=0, column=1)
    
    tk.Button(search_window, text="Search", command=perform_search).grid(row=0, column=2)
    
    listbox_results = tk.Listbox(search_window, width=80, height=20)
    listbox_results.grid(row=1, column=0, columnspan=3)

# Function to view data in the database
def view_data():
    def display_data(data, title):
        data_window = tk.Toplevel(root)
        data_window.title(title)
        listbox = tk.Listbox(data_window, width=100, height=20)
        listbox.pack()
        for row in data:
            listbox.insert(tk.END, row)

    conn = connect_db()
    cursor = conn.cursor()

    # Fetching and displaying items
    cursor.execute("SELECT * FROM items")
    items = cursor.fetchall()
    display_data(items, "Items in Library")

    # Fetching and displaying transactions
    cursor.execute("SELECT * FROM transactions")
    transactions = cursor.fetchall()
    display_data(transactions, "Transactions")

    # Fetching and displaying fines
    cursor.execute("SELECT * FROM fines")
    fines = cursor.fetchall()
    display_data(fines, "Fines")

    conn.close()

# Main Menu Buttons
tk.Button(root, text="Add New Item", command=add_item).pack(pady=10)
tk.Button(root, text="Checkout Item", command=checkout_item).pack(pady=10)
tk.Button(root, text="Return Item", command=return_item).pack(pady=10)
tk.Button(root, text="Search Items", command=search_items).pack(pady=10)
tk.Button(root, text="View Data", command=view_data).pack(pady=10)  # New button to view data

root.mainloop()
